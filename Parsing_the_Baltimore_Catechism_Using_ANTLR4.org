#+TITLE: Parsing the Baltimore Catechism Using ANTLR4
#+DATE: <2015-04-29 Wed>
#+AUTHOR:
#+EMAIL: Ed@ANCALAGON
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 24.2.1 (Org mode 8.2.6)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil
#+OPTIONS: html-preamble:nil html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.2.1 (<a href="http://orgmode.org">Org</a> mode 8.2.6)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:

The Baltimore Catechism was the official American catholic catechism from long 
before my parents were young.  It was a clear and thorough introduction to the 
Faith, noted for its clear questions with simple but profound answers.  It is 
also delightfully public domain, so it seems worthwhile to convert the text 
into a machine-readable format, such as JSON.  This would make it possible to
write flash cards or games using the questions and answers.  If you would like to use it, see my project at [[https://github.com/ewcole/baltimore_catechism][GitHub]].

The [[file:GutenbergBaltimoreCatechism1.txt][text of the catechism]] is taken from the Project Gutenberg edition found at [[http://archive.org/stream/baltimorecatechi14551gut/14551.txt][archive.org]].  It is quite regular, so one can hope to write a grammar that will parse it correctly.  For instance, here is lesson 26.

#+include: GutenbergBaltimoreCatechism1.txt example :lines "946-988"

* What is ANTLR?

ANTLR is a Java program that reads grammar files and writes Java programs that recognize text data that is written according to that grammar.  In other words, it is a compiler compiler.

* Building the project using Gradle

In order to make ANTLR a workable part of a big project, it is necessary to integrate it with our build tool, which in our case means [[http://gradle.org/][Gradle]].   There is an ANTLR4 plugin for Gradle, but I have never had any success with it, so we will create the file from scratch, following a [[https://github.com/ae6rt/gradle-antlr4-template/blob/master/build.gradle][template]] from GitHub.

** The build script
The default build script for a Gradle project is build.gradle (see the 
[[*build.gradle][source code]] below).  Gradle uses a Groovy DSL that abstracts away much of the details you need for building the project.

The first section loads the groovy plugin, which defines most of the tasks you would perform when developing a Java or Groovy program, and defines some variables that will be used when generating code.

#+INCLUDE: build.gradle src groovy :lines "1-31"

In the ~dependencies~ section, we specify that this project needs ANTLR 4.5 and Groovy 2.4.3.

#+INCLUDE:  build.gradle src groovy :lines "32-42"

After this, we create two tasks, ~antlrOutputDir~, which creates the directory where we will place the generated code, and ~generateGrammarSource~, which reads the grammar and writes Java source code that compiles to a parser and lexical analyzer for it.

#+INCLUDE:  build.gradle src groovy :lines "44-69"

Finally, we tell Gradle that the ~compileJava~ task depends on ~generateGrammarSource~, and the ~clean~ task should delete the directory with the generated code.
* The Grammar
The project uses a relatively straightforward ANTLR4 grammar.  We skip over some large parts of the file that are of little interest to us, focusing on reading the questions and answers.
#+INCLUDE: src/main/antlr/Catechism1.g4 src antlr
* Using the grammar
ANTLR generates Java classes that read an input text stream and convert it into a tree structure; it is fairly straighforward to create a listener that responds to events generated by a ~ParseTreeWalker~.  The easiest way is to extend the ~XxxBaseListener~ class generated by ANTLR from your grammar.  In this case, I named the grammer Catechism1, so the generated class is Catechism1BaseListener
#+INCLUDE: src/main/groovy/baltimore_catechism/CatechismReader.groovy src groovy :lines "15-16"
You can find the base listener file in the generated source in the target directory, then copy and rename it.  

Most of the base listener class consists of functions like the following.
#+INCLUDE: src/main/groovy/baltimore_catechism/CatechismReader.groovy src groovy :lines "81-96"

In this case, ~enterLesson~ is called when the tree walker enters a node that matched the ~lesson~ rule in the grammar, and ~exitLesson~ is called after the walker has traversed all of the subnodes.

Parsing the input file involves a number of different classes.  The basic idea is to generate a stream of tokens from the input text, which you parse with 
the parser generated from the grammar.  After that, you can use a ~ParseTreeWalker~ to walk the parse tree and do whatever it is that you wanted to do.

#+INCLUDE: src/main/groovy/baltimore_catechism/CatechismReader.groovy src groovy :lines "153-173"
* Output
The output of the program is a JSON file, which is easy to read in most computer languages.  This is what the original sample looks like as JSON.

#+include: baltimore_catechism.json src js2 :lines "953-1005"

* Source Code
** build.gradle
#+INCLUDE: build.gradle src groovy 
** CatechismReader.groovy
#+INCLUDE: src/main/groovy/baltimore_catechism/CatechismReader.groovy src groovy
